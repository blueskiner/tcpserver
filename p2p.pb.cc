// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "p2p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* P2pPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P2pPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* P2pPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P2pPong_reflection_ = NULL;
const ::google::protobuf::Descriptor* P2pRegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P2pRegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* P2pRegisterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P2pRegisterRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* P2pControlType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_p2p_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_p2p_2eproto() {
  protobuf_AddDesc_p2p_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "p2p.proto");
  GOOGLE_CHECK(file != NULL);
  P2pPing_descriptor_ = file->message_type(0);
  static const int P2pPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pPing, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pPing, ts_),
  };
  P2pPing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      P2pPing_descriptor_,
      P2pPing::default_instance_,
      P2pPing_offsets_,
      -1,
      -1,
      -1,
      sizeof(P2pPing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pPing, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pPing, _is_default_instance_));
  P2pPong_descriptor_ = file->message_type(1);
  static const int P2pPong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pPong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pPong, ts_),
  };
  P2pPong_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      P2pPong_descriptor_,
      P2pPong::default_instance_,
      P2pPong_offsets_,
      -1,
      -1,
      -1,
      sizeof(P2pPong),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pPong, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pPong, _is_default_instance_));
  P2pRegisterReq_descriptor_ = file->message_type(2);
  static const int P2pRegisterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pRegisterReq, id_),
  };
  P2pRegisterReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      P2pRegisterReq_descriptor_,
      P2pRegisterReq::default_instance_,
      P2pRegisterReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(P2pRegisterReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pRegisterReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pRegisterReq, _is_default_instance_));
  P2pRegisterRsp_descriptor_ = file->message_type(3);
  static const int P2pRegisterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pRegisterRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pRegisterRsp, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pRegisterRsp, port_),
  };
  P2pRegisterRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      P2pRegisterRsp_descriptor_,
      P2pRegisterRsp::default_instance_,
      P2pRegisterRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(P2pRegisterRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pRegisterRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P2pRegisterRsp, _is_default_instance_));
  P2pControlType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_p2p_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      P2pPing_descriptor_, &P2pPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      P2pPong_descriptor_, &P2pPong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      P2pRegisterReq_descriptor_, &P2pRegisterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      P2pRegisterRsp_descriptor_, &P2pRegisterRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_p2p_2eproto() {
  delete P2pPing::default_instance_;
  delete P2pPing_reflection_;
  delete P2pPong::default_instance_;
  delete P2pPong_reflection_;
  delete P2pRegisterReq::default_instance_;
  delete P2pRegisterReq_reflection_;
  delete P2pRegisterRsp::default_instance_;
  delete P2pRegisterRsp_reflection_;
}

void protobuf_AddDesc_p2p_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_p2p_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tp2p.proto\032\037google/protobuf/timestamp.p"
    "roto\"=\n\007P2pPing\022\n\n\002id\030\001 \001(\003\022&\n\002ts\030\002 \001(\0132"
    "\032.google.protobuf.Timestamp\"=\n\007P2pPong\022\n"
    "\n\002id\030\001 \001(\003\022&\n\002ts\030\002 \001(\0132\032.google.protobuf"
    ".Timestamp\"\034\n\016P2pRegisterReq\022\n\n\002id\030\001 \001(\003"
    "\"8\n\016P2pRegisterRsp\022\n\n\002id\030\001 \001(\003\022\014\n\004host\030\002"
    " \001(\t\022\014\n\004port\030\003 \001(\005*W\n\016P2pControlType\022\013\n\007"
    "UNKNOWN\020\000\022\010\n\004PING\020e\022\010\n\004PONG\020f\022\021\n\014REGISTE"
    "R_REQ\020\351\007\022\021\n\014REGISTER_RSP\020\352\007b\006proto3", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "p2p.proto", &protobuf_RegisterTypes);
  P2pPing::default_instance_ = new P2pPing();
  P2pPong::default_instance_ = new P2pPong();
  P2pRegisterReq::default_instance_ = new P2pRegisterReq();
  P2pRegisterRsp::default_instance_ = new P2pRegisterRsp();
  P2pPing::default_instance_->InitAsDefaultInstance();
  P2pPong::default_instance_->InitAsDefaultInstance();
  P2pRegisterReq::default_instance_->InitAsDefaultInstance();
  P2pRegisterRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_p2p_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_p2p_2eproto {
  StaticDescriptorInitializer_p2p_2eproto() {
    protobuf_AddDesc_p2p_2eproto();
  }
} static_descriptor_initializer_p2p_2eproto_;
const ::google::protobuf::EnumDescriptor* P2pControlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P2pControlType_descriptor_;
}
bool P2pControlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 101:
    case 102:
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P2pPing::kIdFieldNumber;
const int P2pPing::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P2pPing::P2pPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:P2pPing)
}

void P2pPing::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ts_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

P2pPing::P2pPing(const P2pPing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:P2pPing)
}

void P2pPing::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ts_ = NULL;
}

P2pPing::~P2pPing() {
  // @@protoc_insertion_point(destructor:P2pPing)
  SharedDtor();
}

void P2pPing::SharedDtor() {
  if (this != default_instance_) {
    delete ts_;
  }
}

void P2pPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P2pPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P2pPing_descriptor_;
}

const P2pPing& P2pPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p2p_2eproto();
  return *default_instance_;
}

P2pPing* P2pPing::default_instance_ = NULL;

P2pPing* P2pPing::New(::google::protobuf::Arena* arena) const {
  P2pPing* n = new P2pPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P2pPing::Clear() {
// @@protoc_insertion_point(message_clear_start:P2pPing)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && ts_ != NULL) delete ts_;
  ts_ = NULL;
}

bool P2pPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:P2pPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ts;
        break;
      }

      // optional .google.protobuf.Timestamp ts = 2;
      case 2: {
        if (tag == 18) {
         parse_ts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:P2pPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:P2pPing)
  return false;
#undef DO_
}

void P2pPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:P2pPing)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .google.protobuf.Timestamp ts = 2;
  if (this->has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ts_, output);
  }

  // @@protoc_insertion_point(serialize_end:P2pPing)
}

::google::protobuf::uint8* P2pPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:P2pPing)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .google.protobuf.Timestamp ts = 2;
  if (this->has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ts_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:P2pPing)
  return target;
}

int P2pPing::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:P2pPing)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .google.protobuf.Timestamp ts = 2;
  if (this->has_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ts_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P2pPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:P2pPing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const P2pPing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const P2pPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:P2pPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:P2pPing)
    MergeFrom(*source);
  }
}

void P2pPing::MergeFrom(const P2pPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:P2pPing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_ts()) {
    mutable_ts()->::google::protobuf::Timestamp::MergeFrom(from.ts());
  }
}

void P2pPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:P2pPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2pPing::CopyFrom(const P2pPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:P2pPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2pPing::IsInitialized() const {

  return true;
}

void P2pPing::Swap(P2pPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P2pPing::InternalSwap(P2pPing* other) {
  std::swap(id_, other->id_);
  std::swap(ts_, other->ts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P2pPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P2pPing_descriptor_;
  metadata.reflection = P2pPing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P2pPing

// optional int64 id = 1;
void P2pPing::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 P2pPing::id() const {
  // @@protoc_insertion_point(field_get:P2pPing.id)
  return id_;
}
 void P2pPing::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:P2pPing.id)
}

// optional .google.protobuf.Timestamp ts = 2;
bool P2pPing::has_ts() const {
  return !_is_default_instance_ && ts_ != NULL;
}
void P2pPing::clear_ts() {
  if (GetArenaNoVirtual() == NULL && ts_ != NULL) delete ts_;
  ts_ = NULL;
}
const ::google::protobuf::Timestamp& P2pPing::ts() const {
  // @@protoc_insertion_point(field_get:P2pPing.ts)
  return ts_ != NULL ? *ts_ : *default_instance_->ts_;
}
::google::protobuf::Timestamp* P2pPing::mutable_ts() {
  
  if (ts_ == NULL) {
    ts_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:P2pPing.ts)
  return ts_;
}
::google::protobuf::Timestamp* P2pPing::release_ts() {
  // @@protoc_insertion_point(field_release:P2pPing.ts)
  
  ::google::protobuf::Timestamp* temp = ts_;
  ts_ = NULL;
  return temp;
}
void P2pPing::set_allocated_ts(::google::protobuf::Timestamp* ts) {
  delete ts_;
  if (ts != NULL && ts->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_ts = new ::google::protobuf::Timestamp;
    new_ts->CopyFrom(*ts);
    ts = new_ts;
  }
  ts_ = ts;
  if (ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:P2pPing.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P2pPong::kIdFieldNumber;
const int P2pPong::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P2pPong::P2pPong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:P2pPong)
}

void P2pPong::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ts_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

P2pPong::P2pPong(const P2pPong& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:P2pPong)
}

void P2pPong::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ts_ = NULL;
}

P2pPong::~P2pPong() {
  // @@protoc_insertion_point(destructor:P2pPong)
  SharedDtor();
}

void P2pPong::SharedDtor() {
  if (this != default_instance_) {
    delete ts_;
  }
}

void P2pPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P2pPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P2pPong_descriptor_;
}

const P2pPong& P2pPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p2p_2eproto();
  return *default_instance_;
}

P2pPong* P2pPong::default_instance_ = NULL;

P2pPong* P2pPong::New(::google::protobuf::Arena* arena) const {
  P2pPong* n = new P2pPong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P2pPong::Clear() {
// @@protoc_insertion_point(message_clear_start:P2pPong)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && ts_ != NULL) delete ts_;
  ts_ = NULL;
}

bool P2pPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:P2pPong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ts;
        break;
      }

      // optional .google.protobuf.Timestamp ts = 2;
      case 2: {
        if (tag == 18) {
         parse_ts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:P2pPong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:P2pPong)
  return false;
#undef DO_
}

void P2pPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:P2pPong)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .google.protobuf.Timestamp ts = 2;
  if (this->has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ts_, output);
  }

  // @@protoc_insertion_point(serialize_end:P2pPong)
}

::google::protobuf::uint8* P2pPong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:P2pPong)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .google.protobuf.Timestamp ts = 2;
  if (this->has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ts_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:P2pPong)
  return target;
}

int P2pPong::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:P2pPong)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .google.protobuf.Timestamp ts = 2;
  if (this->has_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ts_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P2pPong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:P2pPong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const P2pPong* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const P2pPong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:P2pPong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:P2pPong)
    MergeFrom(*source);
  }
}

void P2pPong::MergeFrom(const P2pPong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:P2pPong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_ts()) {
    mutable_ts()->::google::protobuf::Timestamp::MergeFrom(from.ts());
  }
}

void P2pPong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:P2pPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2pPong::CopyFrom(const P2pPong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:P2pPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2pPong::IsInitialized() const {

  return true;
}

void P2pPong::Swap(P2pPong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P2pPong::InternalSwap(P2pPong* other) {
  std::swap(id_, other->id_);
  std::swap(ts_, other->ts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P2pPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P2pPong_descriptor_;
  metadata.reflection = P2pPong_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P2pPong

// optional int64 id = 1;
void P2pPong::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 P2pPong::id() const {
  // @@protoc_insertion_point(field_get:P2pPong.id)
  return id_;
}
 void P2pPong::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:P2pPong.id)
}

// optional .google.protobuf.Timestamp ts = 2;
bool P2pPong::has_ts() const {
  return !_is_default_instance_ && ts_ != NULL;
}
void P2pPong::clear_ts() {
  if (GetArenaNoVirtual() == NULL && ts_ != NULL) delete ts_;
  ts_ = NULL;
}
const ::google::protobuf::Timestamp& P2pPong::ts() const {
  // @@protoc_insertion_point(field_get:P2pPong.ts)
  return ts_ != NULL ? *ts_ : *default_instance_->ts_;
}
::google::protobuf::Timestamp* P2pPong::mutable_ts() {
  
  if (ts_ == NULL) {
    ts_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:P2pPong.ts)
  return ts_;
}
::google::protobuf::Timestamp* P2pPong::release_ts() {
  // @@protoc_insertion_point(field_release:P2pPong.ts)
  
  ::google::protobuf::Timestamp* temp = ts_;
  ts_ = NULL;
  return temp;
}
void P2pPong::set_allocated_ts(::google::protobuf::Timestamp* ts) {
  delete ts_;
  if (ts != NULL && ts->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_ts = new ::google::protobuf::Timestamp;
    new_ts->CopyFrom(*ts);
    ts = new_ts;
  }
  ts_ = ts;
  if (ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:P2pPong.ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P2pRegisterReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P2pRegisterReq::P2pRegisterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:P2pRegisterReq)
}

void P2pRegisterReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

P2pRegisterReq::P2pRegisterReq(const P2pRegisterReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:P2pRegisterReq)
}

void P2pRegisterReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
}

P2pRegisterReq::~P2pRegisterReq() {
  // @@protoc_insertion_point(destructor:P2pRegisterReq)
  SharedDtor();
}

void P2pRegisterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void P2pRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P2pRegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P2pRegisterReq_descriptor_;
}

const P2pRegisterReq& P2pRegisterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p2p_2eproto();
  return *default_instance_;
}

P2pRegisterReq* P2pRegisterReq::default_instance_ = NULL;

P2pRegisterReq* P2pRegisterReq::New(::google::protobuf::Arena* arena) const {
  P2pRegisterReq* n = new P2pRegisterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P2pRegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:P2pRegisterReq)
  id_ = GOOGLE_LONGLONG(0);
}

bool P2pRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:P2pRegisterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:P2pRegisterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:P2pRegisterReq)
  return false;
#undef DO_
}

void P2pRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:P2pRegisterReq)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:P2pRegisterReq)
}

::google::protobuf::uint8* P2pRegisterReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:P2pRegisterReq)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:P2pRegisterReq)
  return target;
}

int P2pRegisterReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:P2pRegisterReq)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P2pRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:P2pRegisterReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const P2pRegisterReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const P2pRegisterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:P2pRegisterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:P2pRegisterReq)
    MergeFrom(*source);
  }
}

void P2pRegisterReq::MergeFrom(const P2pRegisterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:P2pRegisterReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void P2pRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:P2pRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2pRegisterReq::CopyFrom(const P2pRegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:P2pRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2pRegisterReq::IsInitialized() const {

  return true;
}

void P2pRegisterReq::Swap(P2pRegisterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P2pRegisterReq::InternalSwap(P2pRegisterReq* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P2pRegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P2pRegisterReq_descriptor_;
  metadata.reflection = P2pRegisterReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P2pRegisterReq

// optional int64 id = 1;
void P2pRegisterReq::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 P2pRegisterReq::id() const {
  // @@protoc_insertion_point(field_get:P2pRegisterReq.id)
  return id_;
}
 void P2pRegisterReq::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:P2pRegisterReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P2pRegisterRsp::kIdFieldNumber;
const int P2pRegisterRsp::kHostFieldNumber;
const int P2pRegisterRsp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P2pRegisterRsp::P2pRegisterRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:P2pRegisterRsp)
}

void P2pRegisterRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

P2pRegisterRsp::P2pRegisterRsp(const P2pRegisterRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:P2pRegisterRsp)
}

void P2pRegisterRsp::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

P2pRegisterRsp::~P2pRegisterRsp() {
  // @@protoc_insertion_point(destructor:P2pRegisterRsp)
  SharedDtor();
}

void P2pRegisterRsp::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void P2pRegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P2pRegisterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P2pRegisterRsp_descriptor_;
}

const P2pRegisterRsp& P2pRegisterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_p2p_2eproto();
  return *default_instance_;
}

P2pRegisterRsp* P2pRegisterRsp::default_instance_ = NULL;

P2pRegisterRsp* P2pRegisterRsp::New(::google::protobuf::Arena* arena) const {
  P2pRegisterRsp* n = new P2pRegisterRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P2pRegisterRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:P2pRegisterRsp)
  id_ = GOOGLE_LONGLONG(0);
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool P2pRegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:P2pRegisterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // optional string host = 2;
      case 2: {
        if (tag == 18) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "P2pRegisterRsp.host"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:P2pRegisterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:P2pRegisterRsp)
  return false;
#undef DO_
}

void P2pRegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:P2pRegisterRsp)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "P2pRegisterRsp.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:P2pRegisterRsp)
}

::google::protobuf::uint8* P2pRegisterRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:P2pRegisterRsp)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string host = 2;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "P2pRegisterRsp.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:P2pRegisterRsp)
  return target;
}

int P2pRegisterRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:P2pRegisterRsp)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P2pRegisterRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:P2pRegisterRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const P2pRegisterRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const P2pRegisterRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:P2pRegisterRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:P2pRegisterRsp)
    MergeFrom(*source);
  }
}

void P2pRegisterRsp::MergeFrom(const P2pRegisterRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:P2pRegisterRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void P2pRegisterRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:P2pRegisterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2pRegisterRsp::CopyFrom(const P2pRegisterRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:P2pRegisterRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2pRegisterRsp::IsInitialized() const {

  return true;
}

void P2pRegisterRsp::Swap(P2pRegisterRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P2pRegisterRsp::InternalSwap(P2pRegisterRsp* other) {
  std::swap(id_, other->id_);
  host_.Swap(&other->host_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P2pRegisterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P2pRegisterRsp_descriptor_;
  metadata.reflection = P2pRegisterRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P2pRegisterRsp

// optional int64 id = 1;
void P2pRegisterRsp::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 P2pRegisterRsp::id() const {
  // @@protoc_insertion_point(field_get:P2pRegisterRsp.id)
  return id_;
}
 void P2pRegisterRsp::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:P2pRegisterRsp.id)
}

// optional string host = 2;
void P2pRegisterRsp::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& P2pRegisterRsp::host() const {
  // @@protoc_insertion_point(field_get:P2pRegisterRsp.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void P2pRegisterRsp::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:P2pRegisterRsp.host)
}
 void P2pRegisterRsp::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:P2pRegisterRsp.host)
}
 void P2pRegisterRsp::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:P2pRegisterRsp.host)
}
 ::std::string* P2pRegisterRsp::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:P2pRegisterRsp.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* P2pRegisterRsp::release_host() {
  // @@protoc_insertion_point(field_release:P2pRegisterRsp.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void P2pRegisterRsp::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:P2pRegisterRsp.host)
}

// optional int32 port = 3;
void P2pRegisterRsp::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 P2pRegisterRsp::port() const {
  // @@protoc_insertion_point(field_get:P2pRegisterRsp.port)
  return port_;
}
 void P2pRegisterRsp::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:P2pRegisterRsp.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
