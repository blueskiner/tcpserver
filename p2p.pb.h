// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#ifndef PROTOBUF_p2p_2eproto__INCLUDED
#define PROTOBUF_p2p_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_p2p_2eproto();
void protobuf_AssignDesc_p2p_2eproto();
void protobuf_ShutdownFile_p2p_2eproto();

class P2pPing;
class P2pPong;
class P2pRegisterReq;
class P2pRegisterRsp;

enum P2pControlType {
  UNKNOWN = 0,
  PING = 101,
  PONG = 102,
  REGISTER_REQ = 1001,
  REGISTER_RSP = 1002,
  P2pControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  P2pControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool P2pControlType_IsValid(int value);
const P2pControlType P2pControlType_MIN = UNKNOWN;
const P2pControlType P2pControlType_MAX = REGISTER_RSP;
const int P2pControlType_ARRAYSIZE = P2pControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* P2pControlType_descriptor();
inline const ::std::string& P2pControlType_Name(P2pControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    P2pControlType_descriptor(), value);
}
inline bool P2pControlType_Parse(
    const ::std::string& name, P2pControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<P2pControlType>(
    P2pControlType_descriptor(), name, value);
}
// ===================================================================

class P2pPing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:P2pPing) */ {
 public:
  P2pPing();
  virtual ~P2pPing();

  P2pPing(const P2pPing& from);

  inline P2pPing& operator=(const P2pPing& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const P2pPing& default_instance();

  void Swap(P2pPing* other);

  // implements Message ----------------------------------------------

  inline P2pPing* New() const { return New(NULL); }

  P2pPing* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const P2pPing& from);
  void MergeFrom(const P2pPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(P2pPing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .google.protobuf.Timestamp ts = 2;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  const ::google::protobuf::Timestamp& ts() const;
  ::google::protobuf::Timestamp* mutable_ts();
  ::google::protobuf::Timestamp* release_ts();
  void set_allocated_ts(::google::protobuf::Timestamp* ts);

  // @@protoc_insertion_point(class_scope:P2pPing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::Timestamp* ts_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_p2p_2eproto();
  friend void protobuf_AssignDesc_p2p_2eproto();
  friend void protobuf_ShutdownFile_p2p_2eproto();

  void InitAsDefaultInstance();
  static P2pPing* default_instance_;
};
// -------------------------------------------------------------------

class P2pPong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:P2pPong) */ {
 public:
  P2pPong();
  virtual ~P2pPong();

  P2pPong(const P2pPong& from);

  inline P2pPong& operator=(const P2pPong& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const P2pPong& default_instance();

  void Swap(P2pPong* other);

  // implements Message ----------------------------------------------

  inline P2pPong* New() const { return New(NULL); }

  P2pPong* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const P2pPong& from);
  void MergeFrom(const P2pPong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(P2pPong* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .google.protobuf.Timestamp ts = 2;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  const ::google::protobuf::Timestamp& ts() const;
  ::google::protobuf::Timestamp* mutable_ts();
  ::google::protobuf::Timestamp* release_ts();
  void set_allocated_ts(::google::protobuf::Timestamp* ts);

  // @@protoc_insertion_point(class_scope:P2pPong)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::Timestamp* ts_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_p2p_2eproto();
  friend void protobuf_AssignDesc_p2p_2eproto();
  friend void protobuf_ShutdownFile_p2p_2eproto();

  void InitAsDefaultInstance();
  static P2pPong* default_instance_;
};
// -------------------------------------------------------------------

class P2pRegisterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:P2pRegisterReq) */ {
 public:
  P2pRegisterReq();
  virtual ~P2pRegisterReq();

  P2pRegisterReq(const P2pRegisterReq& from);

  inline P2pRegisterReq& operator=(const P2pRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const P2pRegisterReq& default_instance();

  void Swap(P2pRegisterReq* other);

  // implements Message ----------------------------------------------

  inline P2pRegisterReq* New() const { return New(NULL); }

  P2pRegisterReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const P2pRegisterReq& from);
  void MergeFrom(const P2pRegisterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(P2pRegisterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:P2pRegisterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_p2p_2eproto();
  friend void protobuf_AssignDesc_p2p_2eproto();
  friend void protobuf_ShutdownFile_p2p_2eproto();

  void InitAsDefaultInstance();
  static P2pRegisterReq* default_instance_;
};
// -------------------------------------------------------------------

class P2pRegisterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:P2pRegisterRsp) */ {
 public:
  P2pRegisterRsp();
  virtual ~P2pRegisterRsp();

  P2pRegisterRsp(const P2pRegisterRsp& from);

  inline P2pRegisterRsp& operator=(const P2pRegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const P2pRegisterRsp& default_instance();

  void Swap(P2pRegisterRsp* other);

  // implements Message ----------------------------------------------

  inline P2pRegisterRsp* New() const { return New(NULL); }

  P2pRegisterRsp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const P2pRegisterRsp& from);
  void MergeFrom(const P2pRegisterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(P2pRegisterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string host = 2;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // optional int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:P2pRegisterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_p2p_2eproto();
  friend void protobuf_AssignDesc_p2p_2eproto();
  friend void protobuf_ShutdownFile_p2p_2eproto();

  void InitAsDefaultInstance();
  static P2pRegisterRsp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// P2pPing

// optional int64 id = 1;
inline void P2pPing::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 P2pPing::id() const {
  // @@protoc_insertion_point(field_get:P2pPing.id)
  return id_;
}
inline void P2pPing::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:P2pPing.id)
}

// optional .google.protobuf.Timestamp ts = 2;
inline bool P2pPing::has_ts() const {
  return !_is_default_instance_ && ts_ != NULL;
}
inline void P2pPing::clear_ts() {
  if (GetArenaNoVirtual() == NULL && ts_ != NULL) delete ts_;
  ts_ = NULL;
}
inline const ::google::protobuf::Timestamp& P2pPing::ts() const {
  // @@protoc_insertion_point(field_get:P2pPing.ts)
  return ts_ != NULL ? *ts_ : *default_instance_->ts_;
}
inline ::google::protobuf::Timestamp* P2pPing::mutable_ts() {
  
  if (ts_ == NULL) {
    ts_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:P2pPing.ts)
  return ts_;
}
inline ::google::protobuf::Timestamp* P2pPing::release_ts() {
  // @@protoc_insertion_point(field_release:P2pPing.ts)
  
  ::google::protobuf::Timestamp* temp = ts_;
  ts_ = NULL;
  return temp;
}
inline void P2pPing::set_allocated_ts(::google::protobuf::Timestamp* ts) {
  delete ts_;
  if (ts != NULL && ts->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_ts = new ::google::protobuf::Timestamp;
    new_ts->CopyFrom(*ts);
    ts = new_ts;
  }
  ts_ = ts;
  if (ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:P2pPing.ts)
}

// -------------------------------------------------------------------

// P2pPong

// optional int64 id = 1;
inline void P2pPong::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 P2pPong::id() const {
  // @@protoc_insertion_point(field_get:P2pPong.id)
  return id_;
}
inline void P2pPong::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:P2pPong.id)
}

// optional .google.protobuf.Timestamp ts = 2;
inline bool P2pPong::has_ts() const {
  return !_is_default_instance_ && ts_ != NULL;
}
inline void P2pPong::clear_ts() {
  if (GetArenaNoVirtual() == NULL && ts_ != NULL) delete ts_;
  ts_ = NULL;
}
inline const ::google::protobuf::Timestamp& P2pPong::ts() const {
  // @@protoc_insertion_point(field_get:P2pPong.ts)
  return ts_ != NULL ? *ts_ : *default_instance_->ts_;
}
inline ::google::protobuf::Timestamp* P2pPong::mutable_ts() {
  
  if (ts_ == NULL) {
    ts_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:P2pPong.ts)
  return ts_;
}
inline ::google::protobuf::Timestamp* P2pPong::release_ts() {
  // @@protoc_insertion_point(field_release:P2pPong.ts)
  
  ::google::protobuf::Timestamp* temp = ts_;
  ts_ = NULL;
  return temp;
}
inline void P2pPong::set_allocated_ts(::google::protobuf::Timestamp* ts) {
  delete ts_;
  if (ts != NULL && ts->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_ts = new ::google::protobuf::Timestamp;
    new_ts->CopyFrom(*ts);
    ts = new_ts;
  }
  ts_ = ts;
  if (ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:P2pPong.ts)
}

// -------------------------------------------------------------------

// P2pRegisterReq

// optional int64 id = 1;
inline void P2pRegisterReq::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 P2pRegisterReq::id() const {
  // @@protoc_insertion_point(field_get:P2pRegisterReq.id)
  return id_;
}
inline void P2pRegisterReq::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:P2pRegisterReq.id)
}

// -------------------------------------------------------------------

// P2pRegisterRsp

// optional int64 id = 1;
inline void P2pRegisterRsp::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 P2pRegisterRsp::id() const {
  // @@protoc_insertion_point(field_get:P2pRegisterRsp.id)
  return id_;
}
inline void P2pRegisterRsp::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:P2pRegisterRsp.id)
}

// optional string host = 2;
inline void P2pRegisterRsp::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& P2pRegisterRsp::host() const {
  // @@protoc_insertion_point(field_get:P2pRegisterRsp.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void P2pRegisterRsp::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:P2pRegisterRsp.host)
}
inline void P2pRegisterRsp::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:P2pRegisterRsp.host)
}
inline void P2pRegisterRsp::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:P2pRegisterRsp.host)
}
inline ::std::string* P2pRegisterRsp::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:P2pRegisterRsp.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* P2pRegisterRsp::release_host() {
  // @@protoc_insertion_point(field_release:P2pRegisterRsp.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void P2pRegisterRsp::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:P2pRegisterRsp.host)
}

// optional int32 port = 3;
inline void P2pRegisterRsp::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 P2pRegisterRsp::port() const {
  // @@protoc_insertion_point(field_get:P2pRegisterRsp.port)
  return port_;
}
inline void P2pRegisterRsp::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:P2pRegisterRsp.port)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::P2pControlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::P2pControlType>() {
  return ::P2pControlType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_p2p_2eproto__INCLUDED
